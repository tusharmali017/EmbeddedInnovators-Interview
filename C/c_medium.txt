1. When Volatile is needed ? 
2. What is an advantage of having .bss section ?
3. Function pointer and example, use-cases
4. Double pointers
5. Memory allocation / free
  5.1. Return value of malloc(0)  (A: NULL)
  5.2. Have you fixed any memory leakage issues ? Which tools are available to check memory leakage ? 
  5.3. Use of Valgrind to check memory leakage
6. Structure and Union
  6.1. What is practical Use of structure and Union?
7. Data types in C
  7.1. Does integer size varies per platform or remains constant ? Is it dependent on compiler as well ? What could be the size of integer when I use 32 bit compiler in 64 bit OS ?
  7.2. When I say 64 bit OS – what does that 64 represents ? 
  7.3. Is it possible to use 32 bit OS with more than 4GB of RAM ? NO: Why is it not possible?
8. Pointers
  8.1. What is a void pointer? Can you dereference a void pointer without knowing its type?
  >A> 
  A void pointer is a pointer that can be used to point to any data of any arbitrary type. A void pointer can be dereferenced only after explicit casting.    e.g.:
      int a = 5;
      void *b = &a;
      printf(“%d\n”, *((int*)b));
9. Difference between following declarations:
   - const int *p / int const *p; 
   - int *const p;
   - const int* const p;
10. What is stack overflow ? Why does it happens and how to avoid it ? OR If recursive function can't return then what happens ? 
11. Can a C program be compiled or executed in the absence of a main()?
12. Storage classes
  12.1. Can we use register variable as Global ? 
  12.2. Can we use pointer on register variable? Why ?
13. Can a variable be volatile & const? In which scenario this will happen?
  >A> Yes, When we want to read external GPIO memory.
14. Can we define macro inside structure definition?
15. Difference between static function, static inline function & macro.
How 32 bit system differs from 64 bit system. What about the address space. Does pointer size differs? What kind of things we need to take care to obtain portability? What code would you write for it to be non-functional on 64 bit system.



Programs:
------------
1. Implement custom malloc() function – pseudo code and approach understanding
2. Pattern
    1
   232 
  34543 
 4567654 
567898765 
3. Decimal to Hexadecimal / Float to Binary
4. Write custom macro for sizeof 
5. Implement your own itoa function.
6. Implement your own strcspn().  Given 2 strings strcspn(), calculates the length of the number of characters before the 1st occurrence of character present in both the string.
